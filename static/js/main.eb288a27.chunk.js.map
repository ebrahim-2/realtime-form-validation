{"version":3,"sources":["Form/PasswordField.tsx","Form/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Password","_ref","placeholder","name","id","_useState","useState","_useState2","Object","slicedToArray","revealPass","setRevealPass","handleRevealPassword","react_default","a","createElement","formik_esm","type","_ref2","field","Input","assign","icon","Icon","circular","link","onClick","FormSchema","Yup","shape","username","min","max","required","email","password","checkError","formProps","key","errors","touched","CustomForm","rdBoxVal","setRdBoxVal","_useState3","_useState4","successMessage","showSuccessMessage","handleRadioBoxChange","e","data","value","validationSchema","onSubmit","initialValues","handleSubmit","objectWithoutProperties","Form","success","data-testid","Field","error","htmlFor","PasswordField","Divider","Group","inline","Radio","label","onChange","checked","Checkbox","Message","header","content","Button","fluid","color","App","Container","Grid","centered","Column","style","maxWidth","Segment","stacked","horizontal","Header","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb288a27.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Input, Icon } from \"semantic-ui-react\";\nimport { Field as FormikField, FieldProps } from \"formik\";\n\ninterface IPasswordProps {\n  placeholder?: string;\n  name?: string;\n  id: string;\n}\nconst Password: React.FC<IPasswordProps> = ({ placeholder, name, id }) => {\n  const [revealPass, setRevealPass] = useState(false);\n\n  const handleRevealPassword = () => setRevealPass(!revealPass);\n\n  return (\n    <FormikField type=\"password\" name={name ? name : \"password\"}>\n      {({ field }: FieldProps) => {\n        return (\n          <Input\n            id={id}\n            {...field}\n            type={revealPass ? \"text\" : \"password\"}\n            icon={\n              <Icon\n                name={revealPass ? \"eye\" : \"eye slash\"}\n                circular\n                link\n                onClick={handleRevealPassword}\n              />\n            }\n            placeholder={placeholder ? placeholder : \"Password\"}\n          />\n        );\n      }}\n    </FormikField>\n  );\n};\n\nexport default Password;\n","import React, { useState } from \"react\";\nimport * as Yup from \"yup\";\nimport { Field as FormikField, Formik, ErrorMessage } from \"formik\";\nimport {\n  CheckboxProps,\n  Form,\n  Divider,\n  Button,\n  Message,\n} from \"semantic-ui-react\";\nimport PasswordField from \"./PasswordField\";\n\nconst FormSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(3, \" is too short!\")\n    .max(15, \" is too long!\")\n    .required(\" is required\"),\n  email: Yup.string()\n    .min(8, \" is too short!\")\n    .max(25, \" is too long!\")\n    .required(\" is required\"),\n  password: Yup.string()\n    .min(8, \" is too short!\")\n    .max(30, \" is too long!\")\n    .required(\" is required\"),\n});\n\nfunction checkError(formProps: any, key: any) {\n  return !!formProps.errors[key] && !!formProps.touched[key];\n}\n\nconst CustomForm = () => {\n  const [rdBoxVal, setRdBoxVal] = useState(\"m\");\n  const [successMessage, showSuccessMessage] = useState(false);\n\n  function handleRadioBoxChange(\n    e: React.FormEvent<HTMLInputElement>,\n    data: CheckboxProps,\n  ) {\n    setRdBoxVal(data.value as string);\n  }\n\n  function onSubmitHandler() {\n    showSuccessMessage(true);\n  }\n\n  return (\n    <Formik\n      validationSchema={FormSchema}\n      onSubmit={onSubmitHandler}\n      initialValues={{ username: \"\", email: \"\", password: \"\" }}\n    >\n      {({ handleSubmit, ...formProps }) => {\n        return (\n          <Form\n            onSubmit={handleSubmit}\n            success={successMessage ? true : false}\n            data-testid=\"form\"\n          >\n            <Form.Field\n              error={checkError(formProps, \"username\") ? true : false}\n            >\n              <label htmlFor=\"username\">\n                Username\n                <ErrorMessage name=\"username\" />\n              </label>\n              <FormikField\n                name=\"username\"\n                id=\"username\"\n                placeholder=\"Enter username\"\n              />\n            </Form.Field>\n\n            <Form.Field error={checkError(formProps, \"email\") ? true : false}>\n              <label htmlFor=\"email\">\n                Email <ErrorMessage name=\"email\" />\n              </label>\n              <FormikField\n                name=\"email\"\n                type=\"email\"\n                id=\"email\"\n                placeholder=\"Enter email\"\n              />\n            </Form.Field>\n\n            <Form.Field\n              error={checkError(formProps, \"password\") ? true : false}\n            >\n              <label htmlFor=\"password\">\n                Password <ErrorMessage name=\"password\" />\n              </label>\n              <PasswordField id=\"password\" />\n            </Form.Field>\n            <Divider />\n\n            <Form.Group inline>\n              <label>Gender</label>\n              <Form.Radio\n                label=\"Male\"\n                value=\"m\"\n                onChange={handleRadioBoxChange}\n                checked={rdBoxVal === \"m\"}\n              />\n              <Form.Radio\n                label=\"Female\"\n                value=\"f\"\n                onChange={handleRadioBoxChange}\n                checked={rdBoxVal === \"f\"}\n              />\n              <Form.Radio\n                label=\"Other\"\n                value=\"o\"\n                onChange={handleRadioBoxChange}\n                checked={rdBoxVal === \"o\"}\n              />\n            </Form.Group>\n            <Divider />\n\n            <Form.Checkbox label=\"I agree to the Terms and Conditions\" />\n            <Divider />\n\n            {successMessage && (\n              <Message\n                success\n                header=\"Form Completed\"\n                content=\"Lorem ipsum dolor sit, amet consectetur adipisicing elit.\"\n                data-testid=\"message\"\n              />\n            )}\n\n            <Button type=\"submit\" fluid color=\"linkedin\">\n              Submit\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default CustomForm;\n","import React from \"react\";\nimport { Container, Divider, Segment, Header, Grid } from \"semantic-ui-react\";\nimport Form from \"./Form\";\n\nconst App: React.FC = () => {\n  return (\n    <Container>\n      <Grid centered>\n        <Grid.Column style={{ maxWidth: 550 }}>\n          <Segment stacked>\n            <Divider horizontal>\n              <Header>\n                <em>Realtime-Form-Validation</em>\n              </Header>\n            </Divider>\n            <Form />\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './style.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}